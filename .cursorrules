You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind.
Code Style and Structure

Write concise, technical TypeScript code with accurate examples.
Use functional and declarative programming patterns; avoid classes.
Prefer iteration and modularization over code duplication.
Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
Structure files: exported component, subcomponents, helpers, static content, types.

Naming Conventions

Use lowercase with dashes for directories (e.g., components/auth-wizard).
Favor named exports for components.
Use PascalCase for component files (e.g., GameCard.tsx).
Use camelCase for utility files (e.g., formatDate.ts).

TypeScript Usage

Use TypeScript for all code; prefer interfaces over types.
Avoid enums; use maps instead.
Use functional components with TypeScript interfaces.
Define explicit return types for components and functions.
Use strict type checking.

Syntax and Formatting

Use the "function" keyword for pure functions.
Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
Use declarative JSX.
Use template literals for string interpolation.
Use optional chaining and nullish coalescing.

UI and Styling

Use Shadcn UI, Radix, and Tailwind for components and styling.
Implement responsive design with Tailwind CSS; use a mobile-first approach.
Use CSS variables for theme values.
Follow accessibility best practices.
Use semantic HTML elements.

Performance Optimization

Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
Wrap client components in Suspense with fallback.
Use dynamic loading for non-critical components.
Optimize images: use WebP format, include size data, implement lazy loading.
Use proper caching strategies.
Implement proper error boundaries.

Key Conventions

Use 'nuqs' for URL search parameter state management.
Optimize Web Vitals (LCP, CLS, FID).
Limit 'use client':

Favor server components and Next.js SSR.
Use only for Web API access in small components.
Avoid for data fetching or state management.
Use proper data fetching patterns (SWR, React Query).
Implement proper loading and error states.

Next.js App Router Specific

Use proper file naming conventions:
- page.tsx for pages
- layout.tsx for layouts
- loading.tsx for loading states
- error.tsx for error boundaries
- not-found.tsx for 404 pages

Follow proper routing patterns:
- Use dynamic routes with [param]
- Implement proper generateStaticParams
- Use proper metadata exports
- Implement proper loading and error states

Follow proper data fetching patterns:
- Use proper caching strategies
- Implement proper revalidation
- Use proper streaming patterns
- Implement proper error handling

Follow proper component patterns:
- Use proper server/client component boundaries
- Implement proper suspense boundaries
- Use proper image optimization
- Implement proper font optimization

Follow proper deployment patterns:
- Use proper static/dynamic exports
- Implement proper edge runtime
- Use proper middleware patterns
- Implement proper API routes

Follow Next.js docs for Data Fetching, Rendering, and Routing.

Component Design Patterns

1. Client Components:
- Use 'use client' directive at the top
- Keep client components small and focused
- Move client-side logic to separate components
- Wrap with Suspense when using hooks
- Handle loading and error states

2. Server Components:
- Default to server components
- Keep data fetching in server components
- Pass data as props to client components
- Use proper caching strategies
- Implement proper error boundaries

3. Component Structure:
- One component per file
- Clear component hierarchy
- Proper prop types
- Consistent naming
- Clear separation of concerns

4. State Management:
- Use React hooks for local state
- Use URL params for shared state
- Avoid prop drilling
- Use context for theme/auth
- Implement proper loading states

Error Handling

1. TypeScript Errors:
- Define proper interfaces
- Use strict type checking
- Handle optional values
- Use type guards
- Avoid any type

2. Runtime Errors:
- Implement error boundaries
- Handle loading states
- Validate user input
- Handle API errors
- Provide fallback UI

3. Build Errors:
- Check dependencies
- Verify imports
- Validate exports
- Check file paths
- Review type definitions

Performance Guidelines

1. Code Splitting:
- Use dynamic imports
- Implement lazy loading
- Split by routes
- Split by features
- Optimize bundle size

2. Caching:
- Use proper cache headers
- Implement stale-while-revalidate
- Cache static assets
- Cache API responses
- Use proper cache keys

3. Optimization:
- Optimize images
- Minimize CSS
- Use proper fonts
- Implement proper loading
- Monitor performance

Development Workflow

1. Code Review:
- Check types
- Verify imports
- Review component structure
- Validate error handling
- Test edge cases

2. Testing:
- Unit tests for utilities
- Component tests
- Integration tests
- E2E tests
- Performance tests

3. Documentation:
- Update README
- Document components
- Add type definitions
- Include examples
- Update changelog
